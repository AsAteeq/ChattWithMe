/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package justalk.client.gui;

import justalk.client.Client;
import java.awt.Color;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author User
 */
@SuppressWarnings("serial")
public class LoginForm extends javax.swing.JFrame {

    // Default Information
    public static String DEFAULT_HOST = "host";
    public static int DEFAULT_PORT = 2019;
    
    //public static String USERNAME;
        
    private String name;
    private String address;
    private int port;
    private Client client;
        
    /**
     * Creates new form LoginForm
     */
    public LoginForm() {
        initComponents();
        setLocationRelativeTo(null);
        
        serverPortTextField.setEnabled(false);
        
        loginPanel.setEnabled(false);
        usernameLabel.setEnabled(false);
        usernameTextField.setEnabled(false);
        loginButton.setEnabled(false);
        
        try {
            Image i = ImageIO.read(getClass().getResource(""));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        iconPanel = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        connectionPanel = new javax.swing.JPanel();
        serverAdressLabel = new javax.swing.JLabel();
        serverAddressTextField = new javax.swing.JTextField();
        serverPortLabel = new javax.swing.JLabel();
        serverPortTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        loginPanel = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        connectionStatusPanel = new javax.swing.JPanel();
        connectionLabel = new javax.swing.JLabel();
        connectionStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setResizable(false);

        contentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        contentPanel.setLayout(new java.awt.BorderLayout());

        iconPanel.setLayout(new java.awt.BorderLayout());

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(""))); // NOI18N
        iconPanel.add(iconLabel, java.awt.BorderLayout.CENTER);

        contentPanel.add(iconPanel, java.awt.BorderLayout.WEST);

        mainPanel.setLayout(new java.awt.BorderLayout());

        connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Server connection (IP and Port)"));
        connectionPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        serverAdressLabel.setText("IP Address:");
        serverAdressLabel.setPreferredSize(new java.awt.Dimension(60, 14));
        connectionPanel.add(serverAdressLabel);

        serverAddressTextField.setText(DEFAULT_HOST);
        serverAddressTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        connectionPanel.add(serverAddressTextField);

        serverPortLabel.setText("Port:");
        connectionPanel.add(serverPortLabel);

        serverPortTextField.setText(DEFAULT_PORT+"");
        serverPortTextField.setMinimumSize(null);
        serverPortTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        connectionPanel.add(serverPortTextField);

        connectButton.setText("Connect");
        connectButton.setPreferredSize(new java.awt.Dimension(100, 23));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        connectionPanel.add(connectButton);

        mainPanel.add(connectionPanel, java.awt.BorderLayout.PAGE_START);

        loginPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Login"));
        loginPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        usernameLabel.setText("Username:");
        usernameLabel.setPreferredSize(new java.awt.Dimension(60, 14));
        loginPanel.add(usernameLabel);

        usernameTextField.setPreferredSize(new java.awt.Dimension(180, 25));
        loginPanel.add(usernameTextField);

        loginButton.setText("Login");
        loginButton.setPreferredSize(new java.awt.Dimension(185, 30));
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginPanel.add(loginButton);

        mainPanel.add(loginPanel, java.awt.BorderLayout.CENTER);

        connectionStatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        connectionStatusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        connectionLabel.setText("Connection Status:");
        connectionStatusPanel.add(connectionLabel);

        connectionStatusLabel.setForeground(java.awt.Color.red);
        connectionStatusLabel.setText("Disconnected");
        connectionStatusPanel.add(connectionStatusLabel);

        mainPanel.add(connectionStatusPanel, java.awt.BorderLayout.PAGE_END);

        contentPanel.add(mainPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(contentPanel, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        if (connectButton.getText().equals("Connect") && checkConnectInput()) {
            connect(address, port);
        } else if(connectButton.getText().equals("Disconnect")) {
            disconnect();
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if (checkUsername()) {
            login(name);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private boolean checkConnectInput() {
        if (!connectionStatusLabel.getText().equals("")) {
            connectionStatusLabel.setText("");
        }
        
        if (!serverAddressTextField.getText().equals("")) {
            this.address = serverAddressTextField.getText();
        } else {
            setConnectionStatus("Address required!");
            return false;
        }
        
        if (!serverPortTextField.getText().equals("")) {
            if (serverPortTextField.getText().matches("[0-9]*")) {
                port = Integer.parseInt(serverPortTextField.getText());
            } else {
                setConnectionStatus("Port must be number!");
                return false;
            }
        } else {
            setConnectionStatus("Port required!");
            return false;
        }
        return true;
    }
    
    private boolean checkUsername() {
        if (!connectionStatusLabel.getText().equals("")) {
            connectionStatusLabel.setText("");
        }
        
        if (!usernameTextField.getText().equals("")) {
            if (usernameTextField.getText().length() > 10) {
                setConnectionStatus("Username must be string of maximum size of 10 characters");
            } else {
                this.name = usernameTextField.getText();
            }
        } else {
            setConnectionStatus("Name required!");
            return false;
        }
        
        return true;
    }
        
    public void setConnectionStatus(String status) {
        connectionStatusLabel.setForeground(Color.red);
        connectionStatusLabel.setText(status);
    }
    
    public void setConnectionStatus(String status, Color color) {
        connectionStatusLabel.setForeground(color);
        connectionStatusLabel.setText(status);
    }
    
    private void connect(String address, int port) {
        try {
            client = new Client();
            client.connect(address, port);
            
            loginPanel.setEnabled(true);
            usernameLabel.setEnabled(true);
            usernameTextField.setEnabled(true);
            loginButton.setEnabled(true);
            
            serverAddressTextField.setEnabled(false);
            connectButton.setText("Disconnect");
            
            setConnectionStatus("Connected", Color.GREEN);
            
        } catch (IOException e) {
            setConnectionStatus("Unable to connect to server");
            System.out.println(e.getMessage());
        }
    }
    
    private void reconnect() {
        try {
            String cAddress = client.getAddress();
            int cPort = client.getPort();
            client.close();
            
            client = new Client();
            client.connect(cAddress, cPort);            
        } catch (IOException e) {
            setConnectionStatus("Unable to connect to server");
            System.out.println(e.getMessage());
        }
    }
    
    private void disconnect() {
        client.close();

        loginPanel.setEnabled(false);
        usernameLabel.setEnabled(false);
        usernameTextField.setEnabled(false);
        loginButton.setEnabled(false);
        serverAddressTextField.setEnabled(true);
        connectButton.setText("Connect");

        setConnectionStatus("Discnnected");
    }
    
    private void login(String name) {
        if (client != null && client.isConnected()) {
            client.login(name);
            
            String text = client.receive();
            String prefix = text.substring(0, 3);
            String message = text.substring(3, text.length());
            
            switch (prefix) {
                case "/1/":
                    System.out.println(message);
                    RoomChatForm frm = new RoomChatForm(client);
                    frm.setVisible(true);
                    frm.start();
                    dispose();
                    break;
                case "/0/":
                    setConnectionStatus(message);
                    reconnect();
                    break;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JPanel connectionPanel;
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JPanel connectionStatusPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JPanel iconPanel;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField serverAddressTextField;
    private javax.swing.JLabel serverAdressLabel;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTextField;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
